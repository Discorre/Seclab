section .data
    promptResult db "Numbers whose sum of digits consists of one decimal place: ", 0 ; Строка для вывода результата
    formatIn db "%d", 0                                         ; Формат ввода чисел
    formatOut db "%d ", 0                                       ; Формат вывода чисел
    newline db 10, 0                                            ; Символ новой строки

section .bss
    n resd 1                                                    ; Переменная для хранения количества чисел
    numbers resd 1000                                           ; Массив для хранения чисел

section .text
    global main
    extern printf
    extern scanf
    extern exit

main:
    ; Ввод количества чисел
    push n                                                      ; Помещаем адрес переменной n в стек для scanf
    push formatIn                                               ; Помещаем формат ввода в стек для scanf
    call scanf                                                  ; Вызываем scanf
    add esp, 8                                                  ; Очищаем аргументы из стека

    ; Ввод чисел
    mov ecx, dword [n]                                          ; Загружаем количество чисел в ecx
    mov edi, numbers                                            ; Загружаем адрес массива чисел в edi
    
input_loop:
    pusha                                                       ; Сохраняем все регистры общего назначения
    push edi                                                    ; Помещаем адрес текущего элемента массива в стек для scanf
    push formatIn                                               ; Помещаем формат ввода в стек для scanf
    call scanf                                                  ; Вызываем scanf
    add esp, 8                                                  ; Очищаем аргументы из стека
    popa                                                        ; Восстанавливаем все регистры общего назначения
    add edi, 4                                                  ; Увеличиваем адрес для перехода к следующему элементу массива
    loop input_loop                                             ; Повторяем ввод для оставшихся чисел

    ; Вывод сообщения о результатах
    push promptResult                                           ; Помещаем адрес строки результата в стек для printf
    call printf                                                 ; Вызываем printf
    add esp, 4                                                  ; Очищаем аргумент из стека

    ; Проверка каждого числа
    mov ecx, dword [n]                                          ; Загружаем количество чисел в ecx
    mov esi, numbers                                            ; Загружаем адрес массива чисел в esi
    
check_loop:
    pusha                                                       ; Сохраняем все регистры общего назначения
    mov eax, dword [esi]                                        ; Загружаем текущее число в eax
    call sumOfDigits                                            ; Вызываем функцию sumOfDigits для вычисления суммы цифр
    cmp eax, 9                                                  ; Сравниваем сумму цифр с 9
    jg skip_print                                               ; Переходим к пропуску печати, если сумма цифр больше 9
    cmp eax, 0                                                  ; Сравниваем сумму цифр с 0
    jl skip_print                                               ; Переходим к пропуску печати, если сумма цифр меньше 0
    pusha                                                       ; Сохраняем все регистры общего назначения
    push dword [esi]                                            ; Помещаем число в стек для printf
    push formatOut                                              ; Помещаем формат вывода в стек для printf
    call printf                                                 ; Вызываем printf
    add esp, 8                                                  ; Очищаем аргументы из стека
    popa                                                        ; Восстанавливаем все регистры общего назначения
    
skip_print:
    popa                                                        ; Восстанавливаем все регистры общего назначения
    add esi, 4                                                  ; Увеличиваем адрес для перехода к следующему числу
    loop check_loop                                             ; Повторяем проверку для оставшихся чисел

    ; Перенос строки после результатов
    push newline                                                ; Помещаем символ новой строки в стек для printf
    call printf                                                 ; Вызываем printf
    add esp, 4                                                  ; Очищаем аргумент из стека

    ; Завершение программы
    push 0                                                      ; Помещаем код завершения в стек для exit
    call exit                                                   ; Вызываем exit

sumOfDigits:
    ; eax содержит число для вычисления суммы цифр
    mov ecx, 0                                                  ; Обнуляем счетчик суммы цифр
    mov ebx, 10                                                 ; Загружаем делитель (10) в ebx
    cmp eax, 0                                                  ; Сравниваем число с нулем
    jge sum_loop                                                ; Переходим к sum_loop, если число неотрицательное
    neg eax                                                     ; Если число отрицательное, делаем его положительным
    
sum_loop:
    test eax, eax                                              ; Проверяем, достигнут ли конец числа
    jz sum_done                                                 ; Если достигнут, завершаем цикл
    mov edx, 0                                                  ; Обнуляем edx для хранения остатка от деления
    div ebx                                                     ; Делим eax на 10 (получаем остаток в edx)
    add ecx, edx                                                ; Добавляем остаток к сумме цифр в ecx
    jmp sum_loop                                                ; Повторяем цикл
    
sum_done:
    mov eax, ecx                                                ; Помещаем сумму цифр в eax для возврата
    ret                                                         ; Возвращаемся из функции
