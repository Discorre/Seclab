use std::io; // Импорт стандартной библиотеки ввода/вывода

fn main() {
    println!("Введите количество банок с водой: "); // Вывод сообщения для ввода количества банок с водой
    let mut bottles = String::new(); // Создание переменной для хранения введенного количества банок
    io::stdin().read_line(&mut bottles) // Считывание строки из стандартного ввода и запись в переменную bottles
        .expect("Не удалось прочитать строку"); // Обработка возможной ошибки при чтении строки

    let bottles: i32 = bottles.trim().parse() // Обрезка лишних символов и преобразование строки в число типа i32
        .expect("Введите корректное число"); // Обработка возможной ошибки при преобразовании

    println!("Введите курс обмена пустых банок на новые: "); // Вывод сообщения для ввода курса обмена
    let mut rate = String::new(); // Создание переменной для хранения введенного курса обмена
    io::stdin().read_line(&mut rate) // Считывание строки из стандартного ввода и запись в переменную rate
        .expect("Не удалось прочитать строку"); // Обработка возможной ошибки при чтении строки

    let rate: i32 = rate.trim().parse() // Обрезка лишних символов и преобразование строки в число типа i32
        .expect("Введите корректное число"); // Обработка возможной ошибки при преобразовании

    let bottles_drank = drink_water(bottles, rate); // Вызов функции drink_water с передачей аргументов и сохранение результата
    println!("Максимальное число банок, которое можно выпить: {}", bottles_drank); // Вывод результата
}

fn drink_water(bottles: i32, rate: i32) -> i32 {
    let mut bottles_drank = bottles; // Инициализация переменной с количеством выпитых банок
    let mut empty_bottles = bottles; // Инициализация переменной с количеством пустых банок
    let mut steps = 1; // Инициализация переменной для подсчета шагов

    println!("Дано: "); // Вывод заголовка
    print_happy_faces(bottles); // Вызов функции для вывода смайликов
    println!("Шаг: {}", steps); // Вывод номера текущего шага
    print_empty_bottles(empty_bottles); // Вызов функции для вывода пустых банок

    while empty_bottles >= rate { // Проверка, есть ли еще пустые банки для обмена
        let exchanged_bottles = empty_bottles / rate; // Вычисление количества банок для обмена
        bottles_drank += exchanged_bottles; // Увеличение количества выпитых банок
        let remaining_empty_bottles = empty_bottles % rate; // Вычисление оставшихся пустых банок
        empty_bottles = exchanged_bottles + remaining_empty_bottles; // Обновление количества пустых банок
        steps += 1; // Увеличение числа шагов

        println!("Шаг: {}", steps); // Вывод номера текущего шага
        print_happy_faces(exchanged_bottles); // Вызов функции для вывода смайликов
        print_empty_bottles(remaining_empty_bottles); // Вызов функции для вывода пустых банок

        steps += 1; // Увеличение числа шагов
        println!("Шаг: {}", steps); // Вывод номера текущего шага
        print_empty_bottles(empty_bottles); // Вызов функции для вывода пустых банок
    }

    println!("Количество итераций: {}", steps); // Вывод количества итераций
    bottles_drank // Возврат количества выпитых банок
}

fn print_happy_faces(n: i32) {
    for i in 1..=n { // Цикл для вывода заданного количества смайликов
        print!("☺"); // Вывод смайлика
        if i % 3 == 0 { // Проверка, нужно ли перейти на новую строку
            println!(); // Переход на новую строку
        }
        if i == n && i % 3 != 0 { // Проверка, если количество смайликов не кратно 3
            println!(); // Переход на новую строку
        }
    }
}

fn print_empty_bottles(n: i32) {
    for i in 1..=n { // Цикл для вывода заданного количества пустых банок
        print!("©"); // Вывод пустой банки
        if i % 3 == 0 { // Проверка, нужно ли перейти на новую строку
            println!(); // Переход на новую строку
        }
        if i == n && i % 3 != 0 { // Проверка, если количество пустых банок не кратно 3
            println!(); // Переход на новую строку
        }
    }
}
